package br.com.rescuebots_brain.socket1;

import java.io.EOFException;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.ArrayList;

public class ClienteSocket  extends Activity{

	private static final long serialVersionUID = 1L;
	private Socket servidor = null;
	private ObjectOutputStream output = null;
    private ObjectInputStream input = null;
    private String messageFull = "";
    //private EditText enterField; // insere informações fornecidas pelo usuário
    //private EditText logArea; // exibe informações para o usuário
    private String user = ""; 
    
   // EditText editText_host;
   // EditText editText_log;
   // EditText editText_port;
   // EditText editText_usuario;
//	private Button button_send;
//	private EditText editText_command;
    
	
	public void initClient(String host, int port, String user){
		try {
			this.user = user;
			connectToServer(host, port);
			getStreams();
			processConnection();
		}catch(EOFException eof){
			eof.printStackTrace();
		}catch (IOException e) {
			e.printStackTrace();
		}finally{
			closeConnection();
		}
	}
	
	private void connectToServer(String host, int port) throws UnknownHostException, IOException{
		servidor = new Socket(InetAddress.getByName(host),port);
		if (servidor != null){
			displayMessage(user.toUpperCase() + " conectou ao >> " + servidor + " server \n");
		}
	}
		
	private void closeConnection(){
		try{
			if(output != null)output.close();
			if(input != null)input.close();
			if(servidor != null)servidor.close();
			System.out.println("Terminei a conexão!!!");
		}catch(IOException io){
			io.printStackTrace();
		}
	}
	
	private void getStreams() throws IOException{
		output = new ObjectOutputStream (servidor.getOutputStream());
		output.flush();
		
		input = new ObjectInputStream( servidor.getInputStream() );
	}
	
	private void processConnection() throws IOException{
		do{ 
			try{
				Informacao info;	
				info = (Informacao) input.readObject(); // lê uma nova mensagem mudei para pegar objeto
				if(info.getUsuario() != null && info.getUsuario().length() > 0){
					messageFull = info.getUsuario().toUpperCase();
					messageFull += info.getMessage();
				}else{
					messageFull = info.getMessage();
				}
				
				//adiciona mensagem enviada pelo servidor !!!!
				displayMessage(messageFull + "\n");

			}catch(ClassNotFoundException cl){
				cl.printStackTrace();
			}
		}while(!messageFull.contains("FIM"));
	}
	
	private void sendData( String message ){
	   try{
    	 Informacao info = new Informacao();
         if(user != null) info.setUsuario(user);
    	 info.setMessage(message);
         output.writeObject(info);
         output.flush();
      }catch(IOException io){
         io.printStackTrace();
      }
	 }
	
	
	private void displayMessage( final String messageToDisplay ){
		/*
	      SwingUtilities.invokeLater(new Runnable(){
	            public void run(){
	               displayArea.append( messageToDisplay );
	            } 
	         });*/
		editText_log.append(messageToDisplay);
	   }
	/*
	public static void main(String[] args) {
		ClienteSocket client = new ClienteSocket();
		String usuario = "jalmeida";
		client.initClient("190.0.1.104", 1313 , usuario);
			
	}*/
	   /** Called when the activity is first created. */
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.cliente_socket_activity);
        
        editText_host = (EditText)findViewById(R.id.cliente_socket_activity_editText_host);
        editText_log = (EditText)findViewById(R.id.cliente_socket_activity_editText_log);
        editText_port = (EditText)findViewById(R.id.cliente_socket_activity_editText_port);
        editText_usuario = (EditText)findViewById(R.id.cliente_socket_activity_editText_usuario);
        button_send = (Button)findViewById(R.id.cliente_socket_activity_button_send);
        editText_command = (EditText)findViewById(R.id.cliente_socket_activity_editText_command);
        
        button_send.setOnClickListener(new OnClickListener(){

			@Override
			public void onClick(View arg0) {
				   //sendData(editText_command.getActionCommand());
					sendData(editText_command.getText().toString());
					editText_command.setText( "" );
			}
        	
        });
    	//enterField = new JTextField(); // cria enterField
        /*
	    enterField.addActionListener(new ActionListener(){
	            public void actionPerformed(ActionEvent event){
	               sendData(event.getActionCommand());
	               enterField.setText( "" );
	            } 
	         }
	      );

	      getContentPane().add( enterField, BorderLayout.NORTH );
        */
		ClienteSocket client = new ClienteSocket();
		String usuario = "jalmeida";
		client.initClient("190.0.1.104", 1313 , usuario);
    }
}
